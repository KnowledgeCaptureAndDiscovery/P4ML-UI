#!/usr/bin/env python2

import json
import librosa
import numpy as np
import os
import pandas as pd
from os import path
from sklearn import preprocessing
from sklearn.svm import SVC
from spider.featurization.audio_featurization import AudioFeaturization

# Load the json configuration file
with open("audio_featurization_pipeline-config.json", 'r') as inputFile:
    jsonCall = json.load(inputFile)

# Load the json dataset description file
with open(jsonCall['dataset_schema'], 'r') as inputFile:
    datasetSchema = json.load(inputFile)

# Load the input files from the data_root folder path information, replacing missing values with zeros
dataRoot = jsonCall['data_root']
trainData = pd.read_csv( path.join(dataRoot, 'trainData.csv'), header=0).fillna('0').replace('', '0')
trainTargets = pd.read_csv( path.join(dataRoot, 'trainTargets.csv'), header=0).fillna('0').replace('', '0')

testData = pd.read_csv( path.join(dataRoot, 'testData.csv.gz'), header=0).fillna('0').replace('', '0')

# Initialize the SVM model
model = SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False)

# Encode the categorical data in training data
trainDataCatLabels = []
trainDataLabelEncoders = dict()

for colDesc in datasetSchema['trainData']['trainData']:

    if colDesc['varType']=='categorical':
        trainDataCatLabels.append(colDesc['varName'])
        trainDataLabelEncoders[colDesc['varName']] = preprocessing.LabelEncoder().fit(trainData[colDesc['varName']])
        trainData[colDesc['varName']] = trainDataLabelEncoders[colDesc['varName']].transform(trainData[colDesc['varName']])

# Encode the categorical data in the test targets, uses the first target of the dataset as a target
trainTargetsCatLabel = ''
trainTargetsLabelEncoder = preprocessing.LabelEncoder()

for colDesc in datasetSchema['trainData']['trainTargets']:

    if colDesc['varType']=='categorical':
        trainTargetsCatLabel = colDesc['varName']
        trainTargetsLabelEncoder = trainTargetsLabelEncoder.fit(trainTargets[colDesc['varName']])
        trainTargets = trainTargetsLabelEncoder.transform(trainTargets[colDesc['varName']])

    if colDesc['varRole']=='target':
        break

trainAudio = [librosa.load(path.join(dataRoot, 'raw_data', f))[0] for f in trainData['filename']]
testAudio = [librosa.load(path.join(dataRoot, 'raw_data', f))[0] for f in testData['filename']]

# Train the model
featurizer = AudioFeaturization(sampling_rate=22050, frame_length=0.5, overlap=0.0)
trainFeatures = featurizer.produce(trainAudio)
trainFeatures = [feature[0] for feature in trainFeatures]
trainedModel = model.fit(trainFeatures,trainTargets)

# Encode the testData using the previous label encoders
for colLabel in trainDataCatLabels:

    testData[colLabel] = trainDataLabelEncoders[colLabel].transform(testData[colLabel])

# Predicts targets from the test data
testFeatures = featurizer.produce(testAudio)
testFeatures = [feature[0] for feature in testFeatures]
predictedTargets = trainedModel.predict(testFeatures)

# Reverse the label encoding for predicted targets
predictedTargets = trainTargetsLabelEncoder.inverse_transform(predictedTargets)

# Outputs the predicted targets in the location specified in the JSON configuration file
with open(jsonCall['output_file'], 'w') as outputFile:
    output = pd.DataFrame(predictedTargets).to_csv(outputFile, index_label='d3mIndex', header=[trainTargetsCatLabel])
