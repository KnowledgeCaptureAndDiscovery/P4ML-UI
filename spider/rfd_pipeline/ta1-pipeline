#!/usr/bin/env python2

import os
from os import path

from sklearn import preprocessing
import pandas as pd
import numpy as np
import json
from sklearn.neighbors import KNeighborsClassifier

from spider.distance.rfd import RFD

# Load the json configuration file
with open("ta1-pipeline-config.json", 'r') as inputFile:
    jsonCall = json.load(inputFile)
    inputFile.close()

# Load the json dataset description file
with open(jsonCall['dataset_schema'], 'r') as inputFile:
    datasetSchema = json.load(inputFile)
    inputFile.close()

# Load the input files from the data_root folder path information, replacing missing values with zeros
dataRoot = jsonCall['data_root']
trainData = pd.read_csv( path.join(dataRoot, 'trainData.csv.gz'), header=0 ).fillna('0').replace('', '0')
trainTargets = pd.read_csv( path.join(dataRoot, 'trainTargets.csv.gz'), header=0 ).fillna('0').replace('', '0')

testData = pd.read_csv(path.join(dataRoot, 'testData.csv'), header=0 ).fillna('0').replace('', '0')

# Encode the categorical data in training data
trainDataCatLabels = []
trainDataLabelEncoders = dict()

for colDesc in datasetSchema['trainData']['trainData']:
    if colDesc['varType'] == 'categorical':
        trainDataCatLabels.append(colDesc['varName'])
        trainDataLabelEncoders[colDesc['varName']] = preprocessing.LabelEncoder().fit(trainData[colDesc['varName']])
        trainData[colDesc['varName']] = trainDataLabelEncoders[colDesc['varName']].transform(trainData[colDesc['varName']])

# Encode the categorical data in the test targets, uses the first target of the dataset as a target
trainTargetsCatLabel = ''
trainTargetsLabelEncoder = preprocessing.LabelEncoder()

for colDesc in datasetSchema['trainData']['trainTargets']:
    if colDesc['varType'] == 'categorical':
        trainTargetsCatLabel = colDesc['varName']
        trainTargetsLabelEncoder = trainTargetsLabelEncoder.fit(trainTargets[colDesc['varName']])
        trainTargets = trainTargetsLabelEncoder.transform(trainTargets[colDesc['varName']])
    if colDesc['varRole'] == 'target':
        break

# Encode the testData using the previous label encoders
for colLabel in trainDataCatLabels:
    testData[colLabel] = trainDataLabelEncoders[colLabel].transform(testData[colLabel])

#Translate to numpy
trainData.drop('d3mIndex', axis=1, inplace=True)
testData.drop('d3mIndex', axis=1, inplace=True)
trainData.drop('MouseID', axis=1, inplace=True)
testData.drop('MouseID', axis=1, inplace=True)

temp = trainData.apply(pd.to_numeric, errors='ignore')
traindat = temp.as_matrix()

temp = testData.apply(pd.to_numeric, errors='ignore')
testdat = temp.as_matrix()

n = traindat.shape[0]

trainlabs = trainTargets

# train metric
rfd_metric = RFD(class_cons=450,
                 num_trees=500,
                 min_node_size=1,
                 n_jobs=-1,
                 verbose=1)
rfd_metric.set_training_data(inputs=traindat, outputs=trainlabs)
rfd_metric.fit()

# get output
test_kernel = rfd_metric.produce(inputs=(testdat, traindat))

# do nearest neighbor classification
classifier = KNeighborsClassifier(
    n_neighbors=5, metric="precomputed", n_jobs=-1)
# use dummy training matrix, because it's not needed
classifier.fit(np.zeros((n, n)), trainlabs)
prediction = classifier.predict(test_kernel)

predictedTargets = trainTargetsLabelEncoder.inverse_transform(prediction)
        
# Outputs the predicted targets in the location specified in the JSON configuration file
with open(jsonCall['output_file'], 'w') as outputFile:
    output = pd.DataFrame(predictedTargets).to_csv(outputFile, index_label='d3mIndex', header=[trainTargetsCatLabel])
