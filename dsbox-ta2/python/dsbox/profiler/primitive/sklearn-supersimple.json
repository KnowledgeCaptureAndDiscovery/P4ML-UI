{
  "search_primitives": [
    {
      "algorithm_type": [
        "regression"
      ], 
      "attributes": [
        {
          "description": "Indices of support vectors. ", 
          "name": "support_", 
          "shape": "n_SV", 
          "type": "array-like"
        }, 
        {
          "description": "Support vectors. ", 
          "name": "support_vectors_", 
          "shape": "n_SV, n_features", 
          "type": "array-like"
        }, 
        {
          "description": "Number of support vectors for each class. ", 
          "name": "n_support_", 
          "shape": "n_class", 
          "type": "array-like"
        }, 
        {
          "description": "Coefficients of the support vector in the decision function. For multiclass, coefficient for all 1-vs-1 classifiers. The layout of the coefficients in the multiclass case is somewhat non-trivial. See the section about multi-class classification in the SVM section of the User Guide for details. ", 
          "name": "dual_coef_", 
          "shape": "n_class-1, n_SV", 
          "type": "array"
        }, 
        {
          "description": "Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is a readonly property derived from `dual_coef_` and `support_vectors_`. ", 
          "name": "coef_", 
          "shape": "n_class-1, n_features", 
          "type": "array"
        }, 
        {
          "description": "Constants in decision function. ", 
          "name": "intercept_", 
          "shape": "n_class * (n_class-1", 
          "type": "array"
        }
      ], 
      "category": "svm.classes", 
      "common_name": "SVC", 
      "description": "'C-Support Vector Classification.\n\nThe implementation is based on libsvm. The fit time complexity\nis more than quadratic with the number of samples which makes it hard\nto scale to dataset with more than a couple of 10000 samples.\n\nThe multiclass support is handled according to a one-vs-one scheme.\n\nFor details on the precise mathematical formulation of the provided\nkernel functions and how `gamma`, `coef0` and `degree` affect each\nother, see the corresponding section in the narrative documentation:\n:ref:`svm_kernels`.\n\nRead more in the :ref:`User Guide <svm_classification>`.\n", 
      "id": "sklearn.svm.classes.SVC", 
      "is_class": true, 
      "language": "python", 
      "learning_type": [
        "supervised"
      ], 
      "library": "sklearn", 
      "methods_available": [
        {
          "description": "\"Distance of the samples X to the separating hyperplane.\n", 
          "id": "sklearn.svm.classes.SVC.decision_function", 
          "name": "decision_function", 
          "parameters": [
            {
              "description": "", 
              "name": "X", 
              "shape": "n_samples, n_features", 
              "type": "array-like"
            }
          ], 
          "returns": {
            "description": "Returns the decision function of the sample for each class in the model. If decision_function_shape='ovr', the shape is (n_samples, n_classes) \"", 
            "name": "X", 
            "shape": "n_samples, n_classes * (n_classes-1", 
            "type": "array-like"
          }
        }, 
        {
          "description": "'Fit the SVM model according to the given training data.\n", 
          "id": "sklearn.svm.classes.SVC.fit", 
          "name": "fit", 
          "parameters": [
            {
              "description": "Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel=\"precomputed\", the expected shape of X is (n_samples, n_samples). ", 
              "name": "X", 
              "shape": "n_samples, n_features", 
              "type": "array-like, sparse matrix"
            }, 
            {
              "description": "Target values (class labels in classification, real numbers in regression) ", 
              "name": "y", 
              "shape": "n_samples,", 
              "type": "array-like"
            }, 
            {
              "description": "Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points. ", 
              "name": "sample_weight", 
              "shape": "n_samples,", 
              "type": "array-like"
            }
          ], 
          "returns": {
            "description": "Returns self.  Notes ------ If X and y are not C-ordered and contiguous arrays of np.float64 and X is not a scipy.sparse.csr_matrix, X and/or y may be copied.  If X is a dense array, then the other methods will not support sparse matrices as input. '", 
            "name": "self", 
            "type": "object"
          }
        }, 
        {
          "description": "'Get parameters for this estimator.\n", 
          "id": "sklearn.svm.classes.SVC.get_params", 
          "name": "get_params", 
          "parameters": [
            {
              "description": "If True, will return the parameters for this estimator and contained subobjects that are estimators. ", 
              "name": "deep", 
              "optional": "true", 
              "type": "boolean"
            }
          ], 
          "returns": {
            "description": "Parameter names mapped to their values. '", 
            "name": "params", 
            "type": "mapping"
          }
        }, 
        {
          "description": "'Perform classification on samples in X.\n\nFor an one-class model, +1 or -1 is returned.\n", 
          "id": "sklearn.svm.classes.SVC.predict", 
          "name": "predict", 
          "parameters": [
            {
              "description": "For kernel=\"precomputed\", the expected shape of X is [n_samples_test, n_samples_train] ", 
              "name": "X", 
              "shape": "n_samples, n_features", 
              "type": "array-like, sparse matrix"
            }
          ], 
          "returns": {
            "description": "Class labels for samples in X. '", 
            "name": "y_pred", 
            "shape": "n_samples,", 
            "type": "array"
          }
        }, 
        {
          "description": "'Returns the mean accuracy on the given test data and labels.\n\nIn multi-label classification, this is the subset accuracy\nwhich is a harsh metric since you require for each sample that\neach label set be correctly predicted.\n", 
          "id": "sklearn.svm.classes.SVC.score", 
          "name": "score", 
          "parameters": [
            {
              "description": "Test samples. ", 
              "name": "X", 
              "shape": "n_samples, n_features", 
              "type": "array-like"
            }, 
            {
              "description": "True labels for X. ", 
              "name": "y", 
              "shape": "n_samples", 
              "type": "array-like"
            }, 
            {
              "description": "Sample weights. ", 
              "name": "sample_weight", 
              "optional": "true", 
              "shape": "n_samples", 
              "type": "array-like"
            }
          ], 
          "returns": {
            "description": "Mean accuracy of self.predict(X) wrt. y.  '", 
            "name": "score", 
            "type": "float"
          }
        }, 
        {
          "description": "\"Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as pipelines). The latter have parameters of the form\n``<component>__<parameter>`` so that it's possible to update each\ncomponent of a nested object.\n", 
          "id": "sklearn.svm.classes.SVC.set_params", 
          "name": "set_params", 
          "parameters": [], 
          "returns": {
            "description": "\"", 
            "name": "self"
          }
        }
      ], 
      "name": "sklearn.svm.classes.SVC", 
      "parameters": [
        {
          "default": "1.0", 
          "description": "Penalty parameter C of the error term. ", 
          "name": "C", 
          "optional": "true", 
          "type": "float"
        }, 
        {
          "default": "\\'rbf\\'", 
          "description": "Specifies the kernel type to be used in the algorithm. It must be one of \\'linear\\', \\'poly\\', \\'rbf\\', \\'sigmoid\\', \\'precomputed\\' or a callable. If none is given, \\'rbf\\' will be used. If a callable is given it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape ``(n_samples, n_samples)``. ", 
          "name": "kernel", 
          "optional": "true", 
          "type": "string"
        }, 
        {
          "default": "3", 
          "description": "Degree of the polynomial kernel function (\\'poly\\'). Ignored by all other kernels. ", 
          "name": "degree", 
          "optional": "true", 
          "type": "int"
        }, 
        {
          "default": "\\'auto\\'", 
          "description": "Kernel coefficient for \\'rbf\\', \\'poly\\' and \\'sigmoid\\'. If gamma is \\'auto\\' then 1/n_features will be used instead.  coef0 : float, optional (default=0.0) Independent term in kernel function. It is only significant in \\'poly\\' and \\'sigmoid\\'. ", 
          "name": "gamma", 
          "optional": "true", 
          "type": "float"
        }, 
        {
          "default": "False", 
          "description": "Whether to enable probability estimates. This must be enabled prior to calling `fit`, and will slow down that method. ", 
          "name": "probability", 
          "optional": "true", 
          "type": "boolean"
        }, 
        {
          "default": "True", 
          "description": "Whether to use the shrinking heuristic. ", 
          "name": "shrinking", 
          "optional": "true", 
          "type": "boolean"
        }, 
        {
          "default": "1e-3", 
          "description": "Tolerance for stopping criterion. ", 
          "name": "tol", 
          "optional": "true", 
          "type": "float"
        }, 
        {
          "description": "Specify the size of the kernel cache (in MB). ", 
          "name": "cache_size", 
          "optional": "true", 
          "type": "float"
        }, 
        {
          "description": "Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))`` ", 
          "name": "class_weight", 
          "optional": "true", 
          "type": "dict, \\'balanced\\'"
        }, 
        {
          "description": "Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context. ", 
          "name": "verbose", 
          "type": "bool"
        }, 
        {
          "default": "-1", 
          "description": "Hard limit on iterations within solver, or -1 for no limit. ", 
          "name": "max_iter", 
          "optional": "true", 
          "type": "int"
        }, 
        {
          "description": "Whether to return a one-vs-rest (\\'ovr\\') decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one (\\'ovo\\') decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). The default of None will currently behave as \\'ovo\\' for backward compatibility and raise a deprecation warning, but will change \\'ovr\\' in 0.19.  .. versionadded:: 0.17 *decision_function_shape=\\'ovr\\'* is recommended.  .. versionchanged:: 0.17 Deprecated *decision_function_shape=\\'ovo\\' and None*. ", 
          "name": "decision_function_shape", 
          "type": ""
        }, 
        {
          "description": "The seed of the pseudo random number generator to use when shuffling the data for probability estimation. ", 
          "name": "random_state", 
          "type": "int"
        }
      ], 
      "source_code": "/Users/shah/anaconda/lib/python2.7/site-packages/sklearn/svm/classes.pyc:387", 
      "tags": [
        "svm", 
        "classes"
      ], 
      "task_type": [
        "modeling"
      ], 
      "version": "0.18.1"
    }, 
	{
      "attributes": [
        {
          "description": "Holds the label for each class. ", 
          "name": "classes_", 
          "shape": "n_class,", 
          "type": "array"
        }
      ], 
      "category": "preprocessing.label", 
      "common_name": "Label Encoder", 
      "description": "'Encode labels with value between 0 and n_classes-1.\n\nRead more in the :ref:`User Guide <preprocessing_targets>`.\n\nAttributes\n----------\nclasses_ : array of shape (n_class,)\nHolds the label for each class.\n\nExamples\n--------\n`LabelEncoder` can be used to normalize labels.\n\n>>> from sklearn import preprocessing\n>>> le = preprocessing.LabelEncoder()\n>>> le.fit([1, 2, 2, 6])\nLabelEncoder()\n>>> le.classes_\narray([1, 2, 6])\n>>> le.transform([1, 1, 2, 6]) #doctest: +ELLIPSIS\narray([0, 0, 1, 2]...)\n>>> le.inverse_transform([0, 0, 1, 2])\narray([1, 1, 2, 6])\n\nIt can also be used to transform non-numerical labels (as long as they are\nhashable and comparable) to numerical labels.\n\n>>> le = preprocessing.LabelEncoder()\n>>> le.fit([\"paris\", \"paris\", \"tokyo\", \"amsterdam\"])\nLabelEncoder()\n>>> list(le.classes_)\n[\\'amsterdam\\', \\'paris\\', \\'tokyo\\']\n>>> le.transform([\"tokyo\", \"tokyo\", \"paris\"]) #doctest: +ELLIPSIS\narray([2, 2, 1]...)\n>>> list(le.inverse_transform([2, 2, 1]))\n[\\'tokyo\\', \\'tokyo\\', \\'paris\\']\n\nSee also\n--------\nsklearn.preprocessing.OneHotEncoder : encode categorical integer features\nusing a one-hot aka one-of-K scheme.\n'", 
      "id": "sklearn.preprocessing.label.LabelEncoder", 
      "is_class": true, 
      "language": "python", 
      "library": "sklearn", 
      "methods_available": [
        {
          "description": "'Fit label encoder\n", 
          "id": "sklearn.preprocessing.label.LabelEncoder.fit", 
          "name": "fit", 
          "parameters": [
            {
              "description": "Target values. ", 
              "name": "y", 
              "shape": "n_samples,", 
              "type": "array-like"
            }
          ], 
          "returns": {
            "description": "'", 
            "name": "self", 
            "type": "returns"
          }
        }, 
        {
          "description": "'Fit label encoder and return encoded labels\n", 
          "id": "sklearn.preprocessing.label.LabelEncoder.fit_transform", 
          "name": "fit_transform", 
          "parameters": [
            {
              "description": "Target values. ", 
              "name": "y", 
              "shape": "n_samples", 
              "type": "array-like"
            }
          ], 
          "returns": {
            "description": "'", 
            "name": "y", 
            "shape": "n_samples", 
            "type": "array-like"
          }
        }, 
        {
          "description": "'Get parameters for this estimator.\n", 
          "id": "sklearn.preprocessing.label.LabelEncoder.get_params", 
          "name": "get_params", 
          "parameters": [
            {
              "description": "If True, will return the parameters for this estimator and contained subobjects that are estimators. ", 
              "name": "deep", 
              "optional": "true", 
              "type": "boolean"
            }
          ], 
          "returns": {
            "description": "Parameter names mapped to their values. '", 
            "name": "params", 
            "type": "mapping"
          }
        }, 
        {
          "description": "'Transform labels back to original encoding.\n", 
          "id": "sklearn.preprocessing.label.LabelEncoder.inverse_transform", 
          "name": "inverse_transform", 
          "parameters": [
            {
              "description": "Target values. ", 
              "name": "y", 
              "shape": "n_samples", 
              "type": "numpy"
            }
          ], 
          "returns": {
            "description": "'", 
            "name": "y", 
            "shape": "n_samples", 
            "type": "numpy"
          }
        }, 
        {
          "description": "\"Set the parameters of this estimator.\n\nThe method works on simple estimators as well as on nested objects\n(such as pipelines). The latter have parameters of the form\n``<component>__<parameter>`` so that it's possible to update each\ncomponent of a nested object.\n", 
          "id": "sklearn.preprocessing.label.LabelEncoder.set_params", 
          "name": "set_params", 
          "parameters": [], 
          "returns": {
            "description": "\"", 
            "name": "self"
          }
        }, 
        {
          "description": "'Transform labels to normalized encoding.\n", 
          "id": "sklearn.preprocessing.label.LabelEncoder.transform", 
          "name": "transform", 
          "parameters": [
            {
              "description": "Target values. ", 
              "name": "y", 
              "shape": "n_samples", 
              "type": "array-like"
            }
          ], 
          "returns": {
            "description": "'", 
            "name": "y", 
            "shape": "n_samples", 
            "type": "array-like"
          }
        }
      ], 
      "name": "sklearn.preprocessing.label.LabelEncoder", 
      "parameters": [], 
      "source_code": "/Users/shah/anaconda/lib/python2.7/site-packages/sklearn/preprocessing/label.pyc:56", 
      "tags": [
        "preprocessing", 
        "label"
      ], 
      "version": "0.18.1"
    },
    {
      "common_name": "sklearn.metrics.scorer.get_scorer", 
      "description": "None", 
      "id": "sklearn.metrics.scorer.get_scorer", 
      "is_class": false, 
      "language": "python", 
      "library": "sklearn", 
      "name": "sklearn.metrics.scorer.get_scorer", 
      "parameters": [], 
      "tags": [
        "metrics", 
        "scorer"
      ], 
      "version": "0.18.1"
    }, 
    {
      "common_name": "multiprocessing.forking.assert_spawning", 
      "description": "None", 
      "id": "multiprocessing.forking.assert_spawning", 
      "is_class": false, 
      "language": "python", 
      "library": "sklearn", 
      "name": "multiprocessing.forking.assert_spawning", 
      "parameters": [], 
      "tags": [
        "forking"
      ], 
      "version": "0.18.1"
    }, 
    {
      "common_name": "sklearn.externals.six.byte2int", 
      "description": "None", 
      "id": "sklearn.externals.six.byte2int", 
      "is_class": false, 
      "language": "python", 
      "library": "sklearn", 
      "name": "sklearn.externals.six.byte2int", 
      "parameters": [], 
      "tags": [
        "externals", 
        "six"
      ], 
      "version": "0.18.1"
    }, 
    {
      "common_name": "sklearn.externals.six.create_bound_method", 
      "description": "None", 
      "id": "sklearn.externals.six.create_bound_method", 
      "is_class": false, 
      "language": "python", 
      "library": "sklearn", 
      "name": "sklearn.externals.six.create_bound_method", 
      "parameters": [], 
      "tags": [
        "externals", 
        "six"
      ], 
      "version": "0.18.1"
    }
	]
}
